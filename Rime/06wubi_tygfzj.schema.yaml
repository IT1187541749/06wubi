# Rime schema: 06wubi_tygfzj
# 个人输入法备份仓库:https://github.com/IT1187541749/Rime-data
# 新世紀五筆字型資源庫：https://06wb.github.io
# 新世紀五筆字型QQ群：38021162
# encoding: utf-8
# 2020-08-27

schema:
  schema_id: 06wubi_tygfzj
  name: "新世纪五笔*通规"
  version: "5.0"
  author:
    - 發明人 王永民
  description: |
    新世纪五笔
    碼表源自 CNMan/UnicodeCJK-WuBi06
    敲 z 鍵進入拼音反查
  dependencies:
    - py
    - core2020            #加入此條纔會生成("build/core2020.reverse.bin")這個文件

switches:
  - name: zh_trad
    reset: 0
    states: [ 简体,繁体 ]
  - name: gb2312
    reset: 0
    states: [ 扩展,常用 ]
  - name: 06wubi_spelling
    reset: 0
    states: [ 编码,拆分 ]
  - name: jiayin
    #↓以下1條爲设置以形查音开关.
    reset: 1
  - name: ascii_punct
    #↓以下1條爲设置默认中英文标点状态（0为默认中标，1为默认英标）,默认英标某些功能会失效.
    reset: 1
    states: [ 中标, 英标 ]

  - options: [extended_char, extended_char2, utf-8]
    #↓以下1條爲设置默认字符集.
    reset: 0
    states: ["8105字符集", "27533字符集", "九萬超大字符集"]
  - name: dz_ci
    #↓以下1條爲设置默认词组或者单字.
    reset: 0
    states: ["詞組", "單字"]
  - name: ascii_mode
    #↓以下1條爲设置默认中英文状态（0为默认中文，1为默认英文）
    reset: 0
    states: [ 中文, EN ]

engine:
  filters:
    #↓以下1條爲過濾濾鏡，此條放filters組件最上面可以完美解決簡繁轉換出錯的問題
    - lua_filter@core2020
    #↓以下1條爲词组LUA开关.
    - lua_filter@dz_ci
    - charset_filter@gb2312  
    - simplifier
    - "reverse_lookup_filter@ci_reverse_lookup"
    - "simplifier@06wubi_spelling"
#    - "simplifier@06wubi_spelling_rk"
    - "simplifier@jiayin"
    - uniquifier
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - "affix_segmentor@mkst"
    - "affix_segmentor@rvlk1"
    - "affix_segmentor@zhuyin_fix"
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - "table_translator@rvlk1"
    - table_translator
    - "table_translator@fixed"
    - "table_translator@mkst"
    - "table_translator@zhuyin_fix"
    - "history_translator@history"
    - "lua_translator@time_date"
speller:
  #↓以下1條爲四码唯一自动上屏.
  auto_select: false
  #↓以下1條爲四碼空碼，繼續輸入取消前四碼.
  auto_clear: max_length
  #↓以下1條爲自动清除空码，不满四码也清除(开启后会造成三码空码四码有字词,无法打四码字词的情况).
  #auto_clear: auto
  delimiter: "`"
  #↓以下1條爲形碼最大碼長，超過則頂字上屛〔number〕，或四碼後進入下一字.
  max_code_length: 4
  
translator:
  #↓以下1條爲方案单字码表.
  dictionary: 06wubi_U
  disable_user_dict_for_patterns:
    - "^z.*$"
  db_class: tabledb
  initial_quality: 100000
  #↓以下1條爲是否開啓字符集過濾.
  enable_charset_filter: false
  #↓以下1條爲是否開啓自動造句.
  enable_sentence: false
  #↓以下1條爲是否開啓自動造詞(自动造词).
  enable_encoder: false
  #↓以下1條爲是否對已上屛詞自動成詞(是否开启已上屏的词自动加入词库).
  encode_commit_history: false
  #↓以下1條爲最大自動成詞詞長.
  max_phrase_length: 2
  #↓以下1條爲提前顯示尚未輸入完整碼的字词.
  enable_completion: false
  #↓以下1條爲是否開啓用戶詞典〔用戶詞典記錄動態字詞頻、用戶詞〕.
  enable_user_dict: false
  # 开=true      关=false

fixed:
  __include: /translator
  initial_quality: 1000
  enable_encoder: true
  enable_user_dict: true
  
mkst:
  __include: /translator
  initial_quality: 10
  enable_sentence: true
  prefix: '`'
  tips: "〔精准造词〕"
  tag: mkst

reverse_lookup:
  __include: /translator
  dictionary: py
  tips: "〔拼音反查〕"
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
  tag: rvlk2
    
rvlk1:
  __include: /reverse_lookup
  prefix: "z"
  tag: rvlk1
  extra_tags:
    - rvlk2  
    

ci_reverse_lookup:
  dictionary: 06wubi_U
  tips: "〔五笔滤镜〕"
  tags:
    - rvlk2
    
zhuyin_fix:
  __include: /translator
  prefix: '~'
  tips: "〔以形查音〕"
  tag: zhuyin_fix

simplifier:
  opencc_config: s2t.json
  option_name: zh_trad

06wubi_spelling:
  opencc_config: 06wubi_spelling.json
  option_name: 06wubi_spelling
  show_in_comment: true
  comment_format:
    - "xform/☯/ · /"    
    - "xform/<br>/\r/"
    - "xform/※※※/ /"
    - "xform/※※/ /"    
    - "xform/※/ /"
  tags:
    - abc
    - rvlk1
  tips: all 

jiayin:
  opencc_config: jiayin.json
  option_name: jiayin
  show_in_comment: true
  comment_format:
    - "xform/<br>/\r/"
    - "xform/&nbsp/ /"
  tags:
#   - abc
    - zhuyin_fix
  tips: all 

recognizer:
  import_preset: default
  patterns:
    email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$"
    mkst: "^[a-y]*`[a-y`]*$"
    punct: "^/([0-9]0?|[A-Za-z]+)$"
    rvlk1: "^z[a-z]*'?$"
    rvlk2: "^z[a-z]*'?$"
    uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$|^[a-z]+[.].+$"
    zhuyin_fix: "~[a-y]*?$"
	
charset_filter:
  option_name: gb2312
  
history:
  input: z
  size: 1
  initial_quality: 1
  

key_binder:
  bindings:
    #↓以下2條爲左右方向鍵選擇候選項.
#    - {accept: Left, send: Up, when: has_menu}
#    - {accept: Right, send: Down, when: has_menu}
    #↓以下2條爲左右方向鍵翻页,与上面两行只能二选一,不能同时开启.
    - {accept: Left, send: Page_Up, when: has_menu}
    - {accept: Right, send: Page_Down, when: has_menu}
    #↓以下2條爲-與=翻頁(退格键左边两个键).
    - {accept: minus, send: Page_Up, when: has_menu}
    - {accept: equal, send: Page_Down, when: has_menu}
    #↓以下1條爲選擇第2候選項.
    - {accept: semicolon, send: 2, when: has_menu}
    #↓以下1條爲選擇第3候選項.
    - {accept: apostrophe, send: 3, when: has_menu}
    #↓以下2條爲空碼時按空格鍵清空輸入碼(句前加#空码时使用空格将上屏当前编码).
    - {accept: space, send: Escape, when: composing}
    - {accept: space, send: space, when: has_menu}
    #↓以下2條爲回車清空輸入碼（句前加#将变为回车上屏当前编码）.
    - {accept: Return, send: Escape, when: composing}
    - {accept: Return, send: Escape, when: has_menu}
    #↓以下2條爲打简出繁开关(F3下面那个数字键4).
    - {accept: "Control+Shift+4", toggle: zh_trad, when: always}
    - {accept: "Control+Shift+dollar", toggle: zh_trad, when: always}
    #↓以下1條爲设置中标与英标切换(F4下面那个数字键5).
    - {accept: "Control+Shift+5", toggle: ascii_punct, when: always}
    - {accept: "Control+Shift+percent", toggle: ascii_punct, when: always}
    #↓以下1條爲打简出繁开关.
    - {accept: "Control+Shift+F", toggle: zh_trad, when: always}
    #↓以下3條爲拆分开关.
    - {accept: "Control+Shift+H", toggle: 06wubi_spelling, when: always}
    - {accept: "Control+Shift+J", toggle: 06wubi_spelling, when: always} 
    - {accept: "Control+Shift+K", toggle: 06wubi_spelling, when: always}
    #↓以下3條爲字符集过滤.
    - {accept: "Control+Shift+U", toggle: gb2312, when: always} 
    - {accept: "Control+Shift+I", toggle: gb2312, when: always} 
    - {accept: "Control+Shift+O", toggle: gb2312, when: always}
    #↓以下5條爲方案切换快捷键.
    - {accept: "Control+1", select: 06wubi_tygfzj, when: always}
    - {accept: "Control+2", select: 06wubi_ci, when: always}
    - {accept: "Control+3", select: 06wubi_U, when: always}
    - {accept: "Control+4", select: 06wubi_single, when: always}
    - {accept: "Control+5", select: 06wubi_dz, when: always}

punctuator:
  import_preset: symbols
  
menu:
  #↓以下1條爲候选项数量.
  page_size: 9
